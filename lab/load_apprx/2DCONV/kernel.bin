//
// Generated by LLVM NVPTX Back-End
//

.version 3.2
.target sm_20, texmode_independent
.address_size 64

	// .globl	SobelOperator_kernel // -- Begin function SobelOperator_kernel
.func  (.param .b64 func_retval0) get_global_id
(
	.param .b32 get_global_id_param_0
)
;
.func  (.param .b32 func_retval0) _Z4sqrtf
(
	.param .b32 _Z4sqrtf_param_0
)
;
                                        // @SobelOperator_kernel
.entry SobelOperator_kernel(
	.param .u64 .ptr .global .align 4 SobelOperator_kernel_param_0,
	.param .u64 .ptr .global .align 4 SobelOperator_kernel_param_1,
	.param .u32 SobelOperator_kernel_param_2,
	.param .u32 SobelOperator_kernel_param_3
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<30>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<23>;

// %bb.0:
	mov.u32 	%r4, 0;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b32 param0;
	st.param.b32 	[param0+0], %r4;
	.param .b64 retval0;
	call.uni (retval0), 
	get_global_id, 
	(
	param0
	);
	ld.param.b64 	%rd3, [retval0+0];
	} // callseq 0
	ld.param.u32 	%r5, [SobelOperator_kernel_param_2];
	mov.u32 	%r6, 1;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b32 param0;
	st.param.b32 	[param0+0], %r6;
	.param .b64 retval0;
	call.uni (retval0), 
	get_global_id, 
	(
	param0
	);
	ld.param.b64 	%rd4, [retval0+0];
	} // callseq 1
	cvt.u32.u64 	%r2, %rd4;
	add.s32 	%r7, %r5, -1;
	setp.le.s32 	%p1, %r7, %r2;
	@%p1 bra 	LBB0_3;
// %bb.1:
	ld.param.u32 	%r3, [SobelOperator_kernel_param_3];
	cvt.u32.u64 	%r1, %rd3;
	add.s32 	%r8, %r3, -1;
	setp.gt.s32 	%p2, %r8, %r1;
	setp.gt.s32 	%p3, %r2, 0;
	and.pred  	%p4, %p2, %p3;
	setp.gt.s32 	%p5, %r1, 0;
	and.pred  	%p6, %p5, %p4;
	@!%p6 bra 	LBB0_3;
	bra.uni 	LBB0_2;
LBB0_2:
	ld.param.u64 	%rd2, [SobelOperator_kernel_param_1];
	ld.param.u64 	%rd1, [SobelOperator_kernel_param_0];
	add.s32 	%r9, %r2, -1;
	mul.lo.s32 	%r10, %r9, %r3;
	cvt.s64.s32 	%rd5, %r10;
	cvt.s64.s32 	%rd6, %r1;
	add.s64 	%rd7, %rd5, %rd6;
	shl.b64 	%rd8, %rd7, 2;
	add.s64 	%rd9, %rd1, %rd8;
	ld.global.f32 	%f1, [%rd9+-4];
	mul.rn.f32 	%f2, %f1, 0f00000000;
	sub.rn.f32 	%f3, %f2, %f1;
	ld.global.f32 	%f4, [%rd9+4];
	add.rn.f32 	%f5, %f4, %f3;
	mul.lo.s32 	%r11, %r2, %r3;
	cvt.s64.s32 	%rd10, %r11;
	add.s64 	%rd11, %rd10, %rd6;
	shl.b64 	%rd12, %rd11, 2;
	add.s64 	%rd13, %rd1, %rd12;
	ld.global.f32 	%f6, [%rd13+-4];
	fma.rn.f32 	%f7, %f6, 0fC0000000, %f5;
	add.s32 	%r12, %r11, %r1;
	mul.wide.s32 	%rd14, %r12, 4;
	add.s64 	%rd15, %rd1, %rd14;
	ld.global.f32 	%f8, [%rd15];
	fma.rn.f32 	%f9, %f8, 0f00000000, %f7;
	ld.global.f32 	%f10, [%rd15+4];
	fma.rn.f32 	%f11, %f10, 0f40000000, %f9;
	add.s32 	%r13, %r11, %r3;
	cvt.s64.s32 	%rd16, %r13;
	add.s64 	%rd17, %rd16, %rd6;
	shl.b64 	%rd18, %rd17, 2;
	add.s64 	%rd19, %rd1, %rd18;
	ld.global.f32 	%f12, [%rd19+-4];
	sub.rn.f32 	%f13, %f11, %f12;
	add.s32 	%r14, %r13, %r1;
	mul.wide.s32 	%rd20, %r14, 4;
	add.s64 	%rd21, %rd1, %rd20;
	ld.global.f32 	%f14, [%rd21];
	fma.rn.f32 	%f15, %f14, 0f00000000, %f13;
	ld.global.f32 	%f16, [%rd21+4];
	add.rn.f32 	%f17, %f16, %f15;
	add.rn.f32 	%f18, %f1, %f1;
	add.rn.f32 	%f19, %f1, %f18;
	add.rn.f32 	%f20, %f4, %f19;
	fma.rn.f32 	%f21, %f6, 0f00000000, %f20;
	fma.rn.f32 	%f22, %f8, 0f00000000, %f21;
	fma.rn.f32 	%f23, %f10, 0f00000000, %f22;
	sub.rn.f32 	%f24, %f23, %f12;
	fma.rn.f32 	%f25, %f14, 0fC0000000, %f24;
	sub.rn.f32 	%f26, %f25, %f16;
	mul.rn.f32 	%f27, %f26, %f26;
	fma.rn.f32 	%f28, %f17, %f17, %f27;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b32 param0;
	st.param.f32 	[param0+0], %f28;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z4sqrtf, 
	(
	param0
	);
	ld.param.f32 	%f29, [retval0+0];
	} // callseq 2
	add.s64 	%rd22, %rd2, %rd14;
	st.global.f32 	[%rd22], %f29;
LBB0_3:
	ret;
}
                                        // -- End function
	// .weak	get_global_id   // -- Begin function get_global_id
.func  (.param .b64 func_retval0) get_global_id(
	.param .b32 get_global_id_param_0
)                                       // @get_global_id
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<19>;
	.reg .b64 	%rd<4>;

// %bb.0:
	ld.param.u32 	%r9, [get_global_id_param_0];
	setp.eq.s32 	%p1, %r9, 2;
	@%p1 bra 	LBB1_5;
// %bb.1:
	setp.eq.s32 	%p2, %r9, 1;
	@%p2 bra 	LBB1_4;
// %bb.2:
	mov.u32 	%r17, 0;
	setp.ne.s32 	%p3, %r9, 0;
	mov.u32 	%r18, %r17;
	@%p3 bra 	LBB1_6;
// %bb.3:                               // %get_group_id.exit.thread
	mov.u32 	%r15, %ctaid.x;
	mov.u32 	%r16, %ntid.x;
	mul.lo.s32 	%r17, %r16, %r15;
	mov.u32 	%r18, %tid.x;
	bra.uni 	LBB1_6;
LBB1_5:                                 // %get_group_id.exit.thread2
	mov.u32 	%r11, %ctaid.z;
	mov.u32 	%r12, %ntid.z;
	mul.lo.s32 	%r17, %r12, %r11;
	mov.u32 	%r18, %tid.z;
	bra.uni 	LBB1_6;
LBB1_4:                                 // %get_group_id.exit.thread1
	mov.u32 	%r13, %ctaid.y;
	mov.u32 	%r14, %ntid.y;
	mul.lo.s32 	%r17, %r14, %r13;
	mov.u32 	%r18, %tid.y;
LBB1_6:                                 // %get_local_id.exit
	cvt.u64.u32 	%rd1, %r17;
	cvt.u64.u32 	%rd2, %r18;
	add.s64 	%rd3, %rd2, %rd1;
	st.param.b64 	[func_retval0+0], %rd3;
	ret;
}
                                        // -- End function
	// .weak	_Z4sqrtf        // -- Begin function _Z4sqrtf
.func  (.param .b32 func_retval0) _Z4sqrtf(
	.param .b32 _Z4sqrtf_param_0
)                                       // @_Z4sqrtf
{
	.reg .f32 	%f<3>;

// %bb.0:
	ld.param.f32 	%f1, [_Z4sqrtf_param_0];
	sqrt.rn.f32 	%f2, %f1;
	st.param.f32 	[func_retval0+0], %f2;
	ret;
}
                                        // -- End function

